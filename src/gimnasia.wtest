import rutina.*
import persona.*
import club.*

describe "rutinas" {

//Punto 1: rutinas
	const correrEnLaPlaya = new Running(intensidad = 1.2)// Una actividad de running con intensisdad 1.2
	const remarEnElDelta = new Remo() // Una actividad de remo
	const remarEnCaminoRemeros = new RemoDeCompeticion()// Una actividad de remo comptetitivo
	const maratonBA = new Maraton(intensidad = 1.5)//Una maraton con intensidad 1.5

//Punto 2: personas
	const calamardo = new Sedentaria(peso = 60, tiempo = 5)//Una persona Sedentaria con peso 60 y tiempo de ejercicio 5
 	const bob = new Atleta(peso = 40) // Una persona atleta con peso 40 

//Punto 3: clubes
	const recreo = new Predio(rutinas = #{correrEnLaPlaya, maratonBA})//un predio con correrEnLaPlaya y maratonBA
	const nautico = new Predio(rutinas = #{remarEnElDelta, remarEnCaminoRemeros})//un predio con remarEnElDelta y remarEnCaminoRemeros
	const clubBarrial = new Club(predios = #{recreo, nautico})//un club con recreo y nautico
	

// PUNTO 1
	test "1.1 consulta running" {
		assert.equals(360, correrEnLaPlaya.caloriasGastadasEn(5))
		assert.equals(10200, correrEnLaPlaya.caloriasGastadasEn(90))
		//correrEnLaPlaya deberia gastar 360 calorias al practicarse por 5 minutos
		//correrEnLaPlaya deberia gastar 10200 calorias al practicarse por 90 minutos
	}

	test "1.2 consulta maraton" {
		assert.equals(900, maratonBA.caloriasGastadasEn(5))
		assert.equals(25500, maratonBA.caloriasGastadasEn(90))
		//maratonBA deberia gastar 900 calorias al practicarse por 5 minutos
		//maratonBA deberia gastar 25500 calorias al practicarse por 90 minutos
	}

	test "1.3 consulta remo" {
		assert.equals(520, remarEnElDelta.caloriasGastadasEn(5))
		assert.equals(9360, remarEnElDelta.caloriasGastadasEn(90))
		//remarEnElDelta deberia gastar 520 calorias al practicarse por 5 minutos
		//remarEnElDelta deberia gastar 9360 calorias al practicarse por 90 minutos
	}

	test "1.4 consulta remo competitivo" {
		assert.equals(510, remarEnCaminoRemeros.caloriasGastadasEn(5))
		assert.equals(12750, remarEnCaminoRemeros.caloriasGastadasEn(90))
		//remarEnCaminoRemeros deberia gastar 510 calorias al practicarse por 5 minutos
		//remarEnCaminoRemeros deberia gastar 12750 calorias al practicarse por 90 minutos
	}

//Punto 2: Personas
	//ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
	// Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
	test "2.1.1 test sedentario running" {
		calamardo.aplicar(correrEnLaPlaya)
		assert.equals(59.948, calamardo.peso().truncate(3))
		// hacer que calamardo practique correrEnLaPlaya
		// el peso de calamardo debería ser 59.948 (truncado a 3 decimales)
	} 
	
	test "2.1.2 test sedentario maraton" {
		calamardo.aplicar(maratonBA)
		assert.equals(59.871, calamardo.peso().truncate(3))
		// hacer que calamardo practique maratonBA
		// el peso de calamardo debería ser 59.871 (truncado a 3 decimales)
	} 

	test "2.1.3 test sedentario remo" {
		calamardo.aplicar(remarEnElDelta)
		assert.equals(59.925, calamardo.peso().truncate(3))
		// hacer que calamardo practique remarEnElDelta
		// el peso de calamardo debería ser 59.925 (truncado a 3 decimales)
	} 

	test "2.1.3 test sedentario remo competicion" {
		calamardo.aplicar(remarEnCaminoRemeros)
		assert.equals(59.927, calamardo.peso().truncate(3))
		// hacer que calamardo practique remarEnCaminoRemeros
		// el peso de calamardo debería ser 59.927 (truncado a 3 decimales)
	} 
	
	test "2.1.5 test sedentario no puede practicar" {
		calamardo.peso(40)
		calamardo.aplicar(correrEnLaPlaya)
		assert.equals(40, calamardo.peso())
		// Hacer que el peso de calamardo sea 40
		// hacer que calamardo practique correrEnLaPlaya (NO SE PUEDE!)
		// el peso de calamardo debería ser 40 
	} 
	
	test "2.2.1 test atleta running" {
		bob.aplicar(correrEnLaPlaya)
		assert.equals(39.725, bob.peso().truncate(3))
		// hacer que bob practique correrEnLaPlaya
		// el peso de bob debería ser 39.725 (truncado a 3 decimales)
	}

	test "2.2.2 test atleta maraton" {
		bob.aplicar(maratonBA)
		assert.equals(37.812, bob.peso().truncate(3))
		// hacer que bob practique maratonBA
		// el peso de bob debería ser 37.812 (truncado a 3 decimales)
	}

	test "2.2.3 test atleta remo" {
		bob.aplicar(remarEnElDelta)
		assert.equals(40, bob.peso().truncate(3))
		// hacer que bob practique remarEnElDelta( NO SE PUEDE!)
		// el peso de bob debería ser 40 
	}

	test "2.2.3 test atleta remo de competición" {
		bob.aplicar(remarEnCaminoRemeros)
		assert.equals(39.406, bob.peso().truncate(3))
		// hacer que bob practique remarEnCaminoRemeros
		// el peso de bob debería ser 39.406
	}

//punto 3: Consultas
	test "3.1 el mejor predio" {
		assert.equals(recreo, clubBarrial.mejorPredio(bob))
		assert.equals(recreo, clubBarrial.mejorPredio(calamardo))
		//El mejor predio del clubBarrial para bob debería ser recreo		
		//El mejor predio del clubBarrial para calamardo debería ser recreo		
	}	
	
	test "3.2 predios tranquis" {
		assert.equals(#{}, clubBarrial.prediosTranquis(bob))
		assert.equals(#{recreo}, clubBarrial.prediosTranquis(calamardo))
		//No debería haber predios tranquis en el clubBarrial para bob
		//Los predios tranquis del clubBarrial para calamardo solo incluyen a recreo  
	}
	
	test "3.3 rutinas más exigentes" {
		assert.equals(#{maratonBA, remarEnCaminoRemeros}, clubBarrial.rutinasExigentes(bob))
		assert.equals(#{maratonBA, remarEnElDelta}, clubBarrial.rutinasExigentes(calamardo))
		//Las rutinas más exigentes del clubBarrial para bob son maratonBA y remarEnCaminoRemeros
		//Las rutinas más exigentes del clubBarrial para calamardo son maratonBA y remarEnElDelta
	}
}